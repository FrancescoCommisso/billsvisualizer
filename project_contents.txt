==== Project Tree ====
| | |____index.js
| | |____BillList.css
| | |____index.js
| | |____Calendar.css
| |____reportWebVitals.js
| |____aws-exports.js
| |____App.css
| |____index.js
| |____index.css
| |____App.test.js
| | |____index.js
| | |____BillForm.css
| |____setupTests.js
| |____App.js


==== File: ./src/App.css ====
/* src/App.css */
body {
  margin: 0;
  font-family: "Roboto", sans-serif;
  background-color: #f4f6f9;
  color: #333;
}

.App {
  max-width: 900px;
  margin: 0 auto;
  padding: 20px;
}

h1,
h2 {
  color: #4a90e2;
  text-align: center;
}

.form-container {
  display: flex;
  flex-direction: column;
  gap: 10px;
}

form {
  margin: 20px 0;
  display: flex;
  flex-direction: column;
  gap: 10px;
}

label {
  display: flex;
  justify-content: space-between;
  align-items: center;
  font-weight: bold;
}

input[type="date"],
input[type="number"],
input[type="file"],
input[type="text"] {
  padding: 8px;
  border-radius: 4px;
  border: 1px solid #ccc;
  font-size: 1rem;
  flex: 1;
}

button {
  background-color: #4a90e2;
  color: #fff;
  padding: 10px 15px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

button:hover {
  background-color: #357ab8;
}

.calendar {
  display: grid;
  grid-template-columns: repeat(7, 1fr);
  gap: 10px;
  padding: 20px;
}

.day {
  border: 1px solid #ddd;
  padding: 10px;
  background-color: #fff;
  border-radius: 4px;
  box-shadow: 0 0 5px rgba(0, 0, 0, 0.1);
  text-align: center;
}

.day strong {
  display: block;
  margin-bottom: 10px;
}

ul {
  list-style-type: none;
  padding: 0;
  margin: 0;
}

input[type="file"] {
  margin-top: 10px;
}

.footer {
  margin-top: 20px;
  text-align: center;
  display: flex;
  flex-direction: column;
  gap: 10px;
}

.footer button,
.footer input[type="file"] {
  margin-top: 10px;
  width: 100%;
}

@media (max-width: 768px) {
  .calendar {
    grid-template-columns: repeat(4, 1fr);
  }

  .form-container {
    flex-direction: column;
  }

  .footer {
    flex-direction: column;
  }

  .footer button,
  .footer input[type="file"] {
    width: 100%;
  }
}

@media (max-width: 480px) {
  .calendar {
    grid-template-columns: repeat(2, 1fr);
  }

  .form-container {
    flex-direction: column;
  }

  .footer {
    flex-direction: column;
  }

  .footer button,
  .footer input[type="file"] {
    width: 100%;
  }
}


==== File: ./src/App.js ====
import React, { useState, useEffect } from "react";
import BillForm from "./BillForm";
import BillList from "./BillList";
import Calendar from "./Calendar";
import Cookies from "js-cookie";
import "./App.css";

const App = () => {
  const initializeBills = () => {
    const savedBills = Cookies.get("bills");
    return savedBills ? JSON.parse(savedBills) : [];
  };

  const initializeNextPayday = () => {
    const savedNextPayday = Cookies.get("nextPayday");
    return savedNextPayday || "";
  };

  const initializePayAmount = () => {
    const savedPayAmount = Cookies.get("payAmount");
    return savedPayAmount || "";
  };

  const initializeCashOnHand = () => {
    const savedCashOnHand = Cookies.get("cashOnHand");
    return savedCashOnHand || "";
  };

  const [bills, setBills] = useState(initializeBills);
  const [nextPayday, setNextPayday] = useState(initializeNextPayday);
  const [payAmount, setPayAmount] = useState(initializePayAmount);
  const [cashOnHand, setCashOnHand] = useState(initializeCashOnHand);

  const saveToCookies = () => {
    Cookies.set("bills", JSON.stringify(bills), { expires: 365 });
    Cookies.set("nextPayday", nextPayday, { expires: 365 });
    Cookies.set("payAmount", payAmount, { expires: 365 });
    Cookies.set("cashOnHand", cashOnHand, { expires: 365 });
  };

  useEffect(() => {
    saveToCookies();
  }, [bills, nextPayday, payAmount, cashOnHand]);

  const addBill = (bill) => {
    setBills([...bills, bill]);
  };

  const deleteBill = (index) => {
    const newBills = bills.filter((_, i) => i !== index);
    setBills(newBills);
  };

  const generateMonthlyOccurrences = (bill) => {
    const occurrences = [];
    const billDate = new Date(bill.nextBillDate);
    const end = new Date(nextPayday);

    while (billDate <= end) {
      occurrences.push(new Date(billDate).toISOString().split("T")[0]);
      billDate.setMonth(billDate.getMonth() + 1);
    }

    return occurrences;
  };

  const totalBillsDueBeforeNextPaycheck = () => {
    const payday = new Date(nextPayday);
    const allOccurrences = bills.flatMap(generateMonthlyOccurrences);

    return bills.reduce((total, bill) => {
      const billOccurrences = generateMonthlyOccurrences(bill);
      const billDueBeforePayday = billOccurrences.filter(
        (date) => new Date(date) <= payday
      );

      return total + billDueBeforePayday.length * parseFloat(bill.amount);
    }, 0);
  };

  const exportData = () => {
    const data = {
      bills,
      nextPayday,
      payAmount,
      cashOnHand,
    };
    const dataStr =
      "data:text/json;charset=utf-8," +
      encodeURIComponent(JSON.stringify(data));
    const downloadAnchorNode = document.createElement("a");
    downloadAnchorNode.setAttribute("href", dataStr);
    downloadAnchorNode.setAttribute("download", "data.json");
    document.body.appendChild(downloadAnchorNode); // required for firefox
    downloadAnchorNode.click();
    downloadAnchorNode.remove();
  };

  const importData = (event) => {
    const file = event.target.files[0];
    const reader = new FileReader();
    reader.onload = (e) => {
      const importedData = JSON.parse(e.target.result);
      setBills(importedData.bills || []);
      setNextPayday(importedData.nextPayday || "");
      setPayAmount(importedData.payAmount || "");
      setCashOnHand(importedData.cashOnHand || "");
    };
    reader.readAsText(file);
  };

  return (
    <div className="App">
      <h1>Bill Visualizer</h1>
      {/* <div className="form-container">
        <label>
          Next Payday:
          <input
            type="date"
            value={nextPayday}
            onChange={(e) => setNextPayday(e.target.value)}
          />
        </label>
        <label>
          Pay Amount:
          <input
            type="number"
            value={payAmount}
            onChange={(e) => setPayAmount(e.target.value)}
          />
        </label>
        <label>
          Cash on Hand:
          <input
            type="number"
            value={cashOnHand}
            onChange={(e) => setCashOnHand(e.target.value)}
          />
        </label>
      </div> */}
      <BillForm addBill={addBill} />
      <BillList bills={bills} deleteBill={deleteBill} />
      <Calendar bills={bills} nextPayday={nextPayday} />
      <div className="footer">
        <h2>
          Total Bills Due Before Next Paycheck: $
          {totalBillsDueBeforeNextPaycheck().toFixed(2)}
        </h2>
        <button onClick={exportData}>Export Data</button>
        <input type="file" accept="application/json" onChange={importData} />
        <button onClick={saveToCookies}>Save Data</button>
      </div>
    </div>
  );
};

export default App;


==== File: ./src/App.test.js ====
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});


==== File: ./src/BillForm/BillForm.css ====
/* src/BillForm.css */
form {
  margin: 20px 0;
  display: flex;
  flex-direction: column;
  gap: 10px;
}

input[type="date"],
input[type="number"],
input[type="text"] {
  padding: 10px;
  border-radius: 4px;
  border: 1px solid #ccc;
  font-size: 1rem;
  text-align: center;
}

button {
  background-color: #4a90e2;
  color: #fff;
  padding: 10px 15px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

button:hover {
  background-color: #357ab8;
}


==== File: ./src/BillForm/index.js ====
// src/BillForm.js
import React, { useState } from "react";
import "./BillForm.css";

const BillForm = ({ addBill }) => {
  const [title, setTitle] = useState("");
  const [amount, setAmount] = useState("");
  const [nextBillDate, setNextBillDate] = useState("");

  const handleSubmit = (e) => {
    e.preventDefault();
    addBill({ title, amount, nextBillDate });
    setTitle("");
    setAmount("");
    setNextBillDate("");
  };

  return (
    <form onSubmit={handleSubmit}>
      <h2>Add a Bill</h2>
      <input
        type="text"
        value={title}
        onChange={(e) => setTitle(e.target.value)}
        placeholder="Title"
      />
      <input
        type="number"
        value={amount}
        onChange={(e) => setAmount(e.target.value)}
        placeholder="Amount"
      />
      <input
        type="date"
        value={nextBillDate}
        onChange={(e) => setNextBillDate(e.target.value)}
        placeholder="Next Bill Date"
      />
      <button type="submit">Add Bill</button>
    </form>
  );
};

export default BillForm;


==== File: ./src/BillList/BillList.css ====
/* src/BillList.css */
.bill-list {
  margin: 20px 0;
  overflow-x: auto;
}

table {
  width: 100%;
  border-collapse: collapse;
  margin: 20px 0;
  background-color: #fff;
  border-radius: 4px;
  box-shadow: 0 0 5px rgba(0, 0, 0, 0.1);
}

thead {
  background-color: #4a90e2;
  color: #fff;
}

th,
td {
  padding: 10px;
  border: 1px solid #ddd;
  text-align: left;
}

th {
  font-weight: bold;
}

tbody tr:nth-child(odd) {
  background-color: #f9f9f9;
}

tbody tr:hover {
  background-color: #f1f1f1;
}

td.actions {
  text-align: center;
}

button {
  background-color: #e74c3c;
  color: #fff;
  padding: 5px 10px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

button:hover {
  background-color: #c0392b;
}


==== File: ./src/BillList/index.js ====
// src/BillList.js
import React from "react";
import "./BillList.css";

const BillList = ({ bills, deleteBill }) => (
  <div className="bill-list">
    <h2>Upcoming Bills</h2>
    {bills.length > 0 ? (
      <table>
        <thead>
          <tr>
            <th>Title</th>
            <th>Amount</th>
            <th>Next Bill Date</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          {bills.map((bill, index) => (
            <tr key={index}>
              <td>{bill.title}</td>
              <td>${bill.amount}</td>
              <td>{bill.nextBillDate}</td>
              <td className="actions">
                <button onClick={() => deleteBill(index)}>Delete</button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    ) : (
      <p>No upcoming bills.</p>
    )}
  </div>
);

export default BillList;


==== File: ./src/Calendar/Calendar.css ====
/* src/Calendar.css */
.calendar {
  display: grid;
  grid-template-columns: repeat(7, 1fr);
  gap: 10px;
  padding: 20px;
}

.day {
  border: 1px solid #ddd;
  padding: 10px;
  background-color: #fff;
  border-radius: 4px;
  box-shadow: 0 0 5px rgba(0, 0, 0, 0.1);
  text-align: center;
}

.date-title {
  background-color: #4a90e2;
  color: #fff;
  padding: 5px 0;
  border-radius: 4px 4px 0 0;
  font-weight: bold;
}

ul {
  list-style-type: none;
  padding: 0;
  margin: 0;
}

.bill-card {
  background-color: #f4f6f9;
  border: 1px solid #ddd;
  border-radius: 4px;
  padding: 10px;
  margin: 5px 0;
  box-shadow: 0 0 5px rgba(0, 0, 0, 0.1);
}

.bill-title {
  font-weight: bold;
  color: #4a90e2;
}

.bill-amount {
  color: #e74c3c;
}

@media (max-width: 768px) {
  .calendar {
    grid-template-columns: repeat(4, 1fr);
  }
}

@media (max-width: 480px) {
  .calendar {
    grid-template-columns: repeat(2, 1fr);
  }
}


==== File: ./src/Calendar/index.js ====
// src/Calendar.js
import React from "react";
import "./Calendar.css";

const Calendar = ({ bills, nextPayday }) => {
  const start = new Date();
  const end = new Date(nextPayday);
  const days = [];

  for (let day = start; day <= end; day.setDate(day.getDate() + 1)) {
    days.push(new Date(day)); // Store date objects
  }

  const generateMonthlyOccurrences = (bill) => {
    const occurrences = [];
    const billDate = new Date(bill.nextBillDate);

    while (billDate <= end) {
      occurrences.push(new Date(billDate).toISOString().split("T")[0]);
      billDate.setMonth(billDate.getMonth() + 1);
    }

    return occurrences;
  };

  const formatDate = (date) => {
    const options = { weekday: "short", day: "2-digit" };
    return date
      .toLocaleDateString("en-US", options)
      .toLowerCase()
      .replace(",", "");
  };

  return (
    <div>
      <h2>Calendar</h2>
      <div className="calendar">
        {days.map((day) => (
          <div key={day.toISOString()} className="day">
            <div className="date-title">{formatDate(day)}</div>
            <ul>
              {bills
                .filter((bill) =>
                  generateMonthlyOccurrences(bill).includes(
                    day.toISOString().split("T")[0]
                  )
                )
                .map((bill, index) => (
                  <li key={index} className="bill-card">
                    <div className="bill-title">{bill.title}</div>
                    <div className="bill-amount">${bill.amount}</div>
                  </li>
                ))}
            </ul>
          </div>
        ))}
      </div>
    </div>
  );
};

export default Calendar;


==== File: ./src/aws-exports.js ====
/* eslint-disable */
// WARNING: DO NOT EDIT. This file is automatically generated by AWS Amplify. It will be overwritten.

const awsmobile = {
    "aws_project_region": "us-east-1"
};


export default awsmobile;


==== File: ./src/index.css ====
/* src/index.css */
@import url("https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap");

body {
  margin: 0;
  font-family: "Roboto", sans-serif;
  background-color: #f4f6f9;
  color: #333;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, "Courier New",
    monospace;
}


==== File: ./src/index.js ====
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();


==== File: ./src/reportWebVitals.js ====
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;


==== File: ./src/setupTests.js ====
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';


